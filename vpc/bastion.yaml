---
AWSTemplateFormatVersion: '2010-09-09'

Description: 'VPC: SSH bastion host/instance'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Parent Stacks'
        Parameters:
          - ParentVPCStack
          - ParentEFSStack
          - ParentZoneStack
          - ParentAlertStack

      - Label:
          default: 'EC2 Parameters'
        Parameters:
          - InstanceType
          - KeyName
          - IAMUserAccess
          - LogsRetentionInDays
          - EFSDirectory
          - Hostname
          - SubnetZone

Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String

  ParentEFSStack:
    Description: 'Optional but recommended stack name of parent EFS stack based on efs/volume.yaml template.'
    Type: String
    Default: ''

  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ''

  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''

  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the EC2 instances of the ECS cluster.'
    Type: AWS::EC2::KeyPair::KeyName
    Default: ''

  IAMUserAccess:
    Description: 'Syncronize IAM users and their public SSH keys'
    Type: String
    Default: false
    AllowedValues: [true, false]

  InstanceType:
    Description: 'The instance type of the EC2 instances of the ECS cluster.'
    Type: String
    Default: 't2.micro'

  SubnetZone:
    Description: 'Subnet zone.'
    Type: String
    Default: A
    AllowedValues: [A, B, C, D]

  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  EFSDirectory:
    Description: 'Optional EFS mountpoint directory to use. Requires ParentEFSStack parameter!'
    Type: String
    Default: /mnt/efs

  Hostname:
    Description: 'Short hostname that is used to create the DNS entry, e.g. ${Hostname}.${HostedZoneName}. Requires ParentZoneStack parameter!'
    Type: String
    Default: 'bastion'

Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-5a8da735
    eu-west-3:
      AMI: ami-d50bbaa8
    eu-west-2:
      AMI: ami-b2b55cd5
    eu-west-1:
      AMI: ami-e4515e0e
    ap-northeast-2:
      AMI: ami-ebc47185
    ap-northeast-1:
      AMI: ami-9c9443e3
    sa-east-1:
      AMI: ami-83d58fef
    ca-central-1:
      AMI: ami-03e86a67
    ap-southeast-1:
      AMI: ami-ed838091
    ap-southeast-2:
      AMI: ami-33f92051
    eu-central-1:
      AMI: ami-a058674b
    us-east-1:
      AMI: ami-cfe4b2b0
    us-east-2:
      AMI: ami-40142d25
    us-west-1:
      AMI: ami-0e86606d
    us-west-2:
      AMI: ami-0ad99772

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserAccess: !Equals [!Ref IAMUserAccess, 'true']
  HasHostname: !Not [!Equals [!Ref Hostname, '']]
  HasEFSVolume: !Not [!Equals [!Ref ParentEFSStack, '']]
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  RecordSet:
    Condition: HasZone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      Name: !Sub
        - '${Hostname}${HostedZoneName}'
        - Hostname: !If [HasHostname, !Sub "${Hostname}.", '']
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      ResourceRecords:
        - !Ref ElasticIP
      TTL: '60'
      Type: A

  NetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      GroupSet:
        - !Ref SecurityGroup
        - !If [HasEFSVolume, {'Fn::ImportValue': !Sub "${ParentEFSStack}-SecurityGroup"}, !Ref 'AWS::NoValue']
      SubnetId:
        Fn::ImportValue: !Sub "${ParentVPCStack}-Subnet${SubnetZone}Public"

  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'ElasticIP.AllocationId'
      NetworkInterfaceId: !Ref NetworkInterface

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
                - 'ssm.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:*:*"

  IAMUserAccessPolicy:
    Type: AWS::IAM::Policy
    Condition: HasIAMUserAccess
    Properties:
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:ListUsers
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:ListSSHPublicKeys
              - iam:GetSSHPublicKey
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
      Roles:
        - !Ref Role

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'VPC SSH Bastion host/instance'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      VpcId:
        Fn::ImportValue: !Sub "${ParentVPCStack}-VPC"

  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - ssm
            - awslogs
            - !If [HasEFSVolume, efsmount, !Ref 'AWS::NoValue']
            - !If [HasIAMUserAccess, iamusers, !Ref 'AWS::NoValue']
            - install
        ssm:
          packages:
            rpm:
              amazon-ssm-agent: https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${LogGroup}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${LogGroup}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${LogGroup}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${LogGroup}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${LogGroup}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${LogGroup}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${LogGroup}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${LogGroup}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${LogGroup}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                    - awslogs
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
        efsmount:
          packages:
            yum:
              'amazon-efs-utils': []
          commands:
            a_mountpoint_mkdir:
              command: !Sub 'mkdir ${EFSDirectory}'
              test: !Sub '[ ! -d ${EFSDirectory} ]'
            b_mountpoint_mount:
              command: !Sub
                - 'while ! (echo > /dev/tcp/${FileSystem}.efs.${AWS::Region}.amazonaws.com/2049) >/dev/null 2>&1; do sleep 10; done && sleep 10 && mount -t efs ${FileSystem}:/ ${EFSDirectory} && chmod 1777 ${EFSDirectory}'
                - FileSystem: !If [HasEFSVolume, {'Fn::ImportValue': !Sub "${ParentEFSStack}-FileSystem"}, '']
              test: !Sub 'if mount | grep -q ${EFSDirectory}; then exit 1; else exit 0; fi'
            c_mountpount_fstab:
              command: !Sub
                - 'echo "${FileSystem}:/ ${EFSDirectory} efs defaults,_netdev 0 0" |tee -a /etc/fstab'
                - FileSystem: !If [HasEFSVolume, {'Fn::ImportValue': !Sub "${ParentEFSStack}-FileSystem"}, '']
              test: !Sub 'if grep -q ${EFSDirectory} /etc/fstab; then exit 1; else exit 0; fi'
        iamusers:
          packages:
            yum:
              'python27-boto3': []
          files:
            /usr/local/sbin/authorized_keys_command:
              content: |
                #!/usr/bin/env python

                import boto3
                import argparse

                def get_authorized_keys(username):
                    client = boto3.client('iam')

                    UnsafeUserName = username
                    UnsafeUserName = UnsafeUserName.replace('.plus.', '+')
                    UnsafeUserName = UnsafeUserName.replace('.equal.', '=')
                    UnsafeUserName = UnsafeUserName.replace('.comma.', ',')
                    UnsafeUserName = UnsafeUserName.replace('.at.', '@')

                    try:
                        for key in client.list_ssh_public_keys(
                            UserName=UnsafeUserName)['SSHPublicKeys']:
                            if key['Status'] == 'Active':
                                print client.get_ssh_public_key(
                                    UserName=UnsafeUserName,
                                    SSHPublicKeyId=key['SSHPublicKeyId'],
                                    Encoding='SSH')['SSHPublicKey']['SSHPublicKeyBody']
                    except:
                        pass

                if __name__ == '__main__':
                    parser = argparse.ArgumentParser(prog='authorized_keys_command')
                    parser.add_argument('username', help='IAM User to retrieve SSH keys for')
                    args = parser.parse_args()
                    get_authorized_keys(args.username)
              mode: '000755'
              owner: root
              group: root
            /usr/local/sbin/import_users:
              content: |
                #!/usr/bin/env python

                import os
                import boto3
                from pwd import getpwnam

                def import_users():
                    client = boto3.client('iam')

                    for user in client.list_users()['Users']:
                        SafeUserName = user['UserName']
                        SafeUserName = SafeUserName.replace('+', '.plus.')
                        SafeUserName = SafeUserName.replace('=', '.equal.')
                        SafeUserName = SafeUserName.replace(',', '.comma.')
                        SafeUserName = SafeUserName.replace('@', '.at.')

                        try:
                            if len(SafeUserName) < 32:
                                try:
                                    user = getpwnam(SafeUserName)
                                except:
                                    returnCode = os.system('/usr/sbin/useradd {}'.format(SafeUserName))
                            else:
                                print 'Can not import IAM user {}. User name is longer than 32 characters.'.format(SafeUserName)
                        except:
                            pass

                if __name__ == '__main__':
                    import_users()
              mode: '000755'
              owner: root
              group: root
            /etc/cron.d/import_users:
              content: |
                */10 * * * * root /usr/local/sbin/import_users
              mode: '000644'
              owner: root
              group: root
          commands:
            a_sshd_command:
              command: 'sed -i "s|#AuthorizedKeysCommand none|AuthorizedKeysCommand /usr/local/sbin/authorized_keys_command|g" /etc/ssh/sshd_config'
            b_sshd_commanduser:
              command: 'sed -i "s|#AuthorizedKeysCommandUser nobody|AuthorizedKeysCommandUser nobody|g" /etc/ssh/sshd_config'
            c_import_users:
              command: '/usr/local/sbin/import_users'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                  - a_sshd_command
                  - b_sshd_commanduser
        install:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      NetworkInterfaces:
        - DeviceIndex: '0'
          NetworkInterfaceId: !Ref NetworkInterface
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          bash -ex << "TRY"
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
          TRY
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M

  RecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Recovering instance when underlying hardware fails.'
      Namespace: 'AWS/EC2'
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance

  CPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
        - Fn::ImportValue: !Sub "${ParentAlertStack}-TopicARN"
      Dimensions:
        - Name: InstanceId
          Value: !Ref Instance

Outputs:
  StackName:
    Description: 'Stack name'
    Value: !Ref 'AWS::StackName'

  IPAddress:
    Description: 'The public IP address of the EC2 instance.'
    Value: !Ref ElasticIP
    Export:
      Name: !Sub "${AWS::StackName}-IPAddress"

  Hostname:
    Condition: HasZone
    Value: !Ref RecordSet
    Export:
      Name: !Sub "${AWS::StackName}-Hostname"
